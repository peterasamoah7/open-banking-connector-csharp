/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.1
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p1.Model
{
    /// <summary>
    /// Result of a funds availability check.
    /// </summary>
    [DataContract]
    public partial class OBFundsAvailableResult1 :  IEquatable<OBFundsAvailableResult1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OBFundsAvailableResult1" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBFundsAvailableResult1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBFundsAvailableResult1" /> class.
        /// </summary>
        /// <param name="fundsAvailableDateTime">Date and time at which the funds availability check was generated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00 (required).</param>
        /// <param name="fundsAvailable">Flag to indicate the availability of funds given the Amount in the consent request. (required).</param>
        public OBFundsAvailableResult1(DateTimeOffset fundsAvailableDateTime = default(DateTimeOffset), bool fundsAvailable = default(bool))
        {
            this.FundsAvailableDateTime = fundsAvailableDateTime;
            this.FundsAvailable = fundsAvailable;
        }
        
        /// <summary>
        /// Date and time at which the funds availability check was generated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
        /// </summary>
        /// <value>Date and time at which the funds availability check was generated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00</value>
        [DataMember(Name="FundsAvailableDateTime", EmitDefaultValue=false)]
        public DateTimeOffset FundsAvailableDateTime { get; set; }

        /// <summary>
        /// Flag to indicate the availability of funds given the Amount in the consent request.
        /// </summary>
        /// <value>Flag to indicate the availability of funds given the Amount in the consent request.</value>
        [DataMember(Name="FundsAvailable", EmitDefaultValue=false)]
        public bool FundsAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBFundsAvailableResult1 {\n");
            sb.Append("  FundsAvailableDateTime: ").Append(FundsAvailableDateTime).Append("\n");
            sb.Append("  FundsAvailable: ").Append(FundsAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBFundsAvailableResult1);
        }

        /// <summary>
        /// Returns true if OBFundsAvailableResult1 instances are equal
        /// </summary>
        /// <param name="input">Instance of OBFundsAvailableResult1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBFundsAvailableResult1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FundsAvailableDateTime == input.FundsAvailableDateTime ||
                    (this.FundsAvailableDateTime != null &&
                    this.FundsAvailableDateTime.Equals(input.FundsAvailableDateTime))
                ) && 
                (
                    this.FundsAvailable == input.FundsAvailable ||
                    this.FundsAvailable.Equals(input.FundsAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FundsAvailableDateTime != null)
                    hashCode = hashCode * 59 + this.FundsAvailableDateTime.GetHashCode();
                hashCode = hashCode * 59 + this.FundsAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.1
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p1.Model
{
    /// <summary>
    /// The multiple authorisation flow response from the ASPSP.
    /// </summary>
    [DataContract]
    public partial class OBMultiAuthorisation1 :  IEquatable<OBMultiAuthorisation1>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public OBExternalStatus2Code Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBMultiAuthorisation1" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBMultiAuthorisation1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBMultiAuthorisation1" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="numberRequired">Number of authorisations required for payment order (total required at the start of the multi authorisation journey)..</param>
        /// <param name="numberReceived">Number of authorisations required for payment order (total required at the start of the multi authorisation journey)..</param>
        /// <param name="lastUpdateDateTime">Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00.</param>
        /// <param name="expirationDateTime">Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00.</param>
        public OBMultiAuthorisation1(OBExternalStatus2Code status = default(OBExternalStatus2Code), int numberRequired = default(int), int numberReceived = default(int), DateTimeOffset lastUpdateDateTime = default(DateTimeOffset), DateTimeOffset expirationDateTime = default(DateTimeOffset))
        {
            this.Status = status;
            this.NumberRequired = numberRequired;
            this.NumberReceived = numberReceived;
            this.LastUpdateDateTime = lastUpdateDateTime;
            this.ExpirationDateTime = expirationDateTime;
        }
        
        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        /// <value>Number of authorisations required for payment order (total required at the start of the multi authorisation journey).</value>
        [DataMember(Name="NumberRequired", EmitDefaultValue=false)]
        public int NumberRequired { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        /// <value>Number of authorisations required for payment order (total required at the start of the multi authorisation journey).</value>
        [DataMember(Name="NumberReceived", EmitDefaultValue=false)]
        public int NumberReceived { get; set; }

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
        /// </summary>
        /// <value>Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00</value>
        [DataMember(Name="LastUpdateDateTime", EmitDefaultValue=false)]
        public DateTimeOffset LastUpdateDateTime { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
        /// </summary>
        /// <value>Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00</value>
        [DataMember(Name="ExpirationDateTime", EmitDefaultValue=false)]
        public DateTimeOffset ExpirationDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBMultiAuthorisation1 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NumberRequired: ").Append(NumberRequired).Append("\n");
            sb.Append("  NumberReceived: ").Append(NumberReceived).Append("\n");
            sb.Append("  LastUpdateDateTime: ").Append(LastUpdateDateTime).Append("\n");
            sb.Append("  ExpirationDateTime: ").Append(ExpirationDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBMultiAuthorisation1);
        }

        /// <summary>
        /// Returns true if OBMultiAuthorisation1 instances are equal
        /// </summary>
        /// <param name="input">Instance of OBMultiAuthorisation1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBMultiAuthorisation1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.NumberRequired == input.NumberRequired ||
                    this.NumberRequired.Equals(input.NumberRequired)
                ) && 
                (
                    this.NumberReceived == input.NumberReceived ||
                    this.NumberReceived.Equals(input.NumberReceived)
                ) && 
                (
                    this.LastUpdateDateTime == input.LastUpdateDateTime ||
                    (this.LastUpdateDateTime != null &&
                    this.LastUpdateDateTime.Equals(input.LastUpdateDateTime))
                ) && 
                (
                    this.ExpirationDateTime == input.ExpirationDateTime ||
                    (this.ExpirationDateTime != null &&
                    this.ExpirationDateTime.Equals(input.ExpirationDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.NumberRequired.GetHashCode();
                hashCode = hashCode * 59 + this.NumberReceived.GetHashCode();
                if (this.LastUpdateDateTime != null)
                    hashCode = hashCode * 59 + this.LastUpdateDateTime.GetHashCode();
                if (this.ExpirationDateTime != null)
                    hashCode = hashCode * 59 + this.ExpirationDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

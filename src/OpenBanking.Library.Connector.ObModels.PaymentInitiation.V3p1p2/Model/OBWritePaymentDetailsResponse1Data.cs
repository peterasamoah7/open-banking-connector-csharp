/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.2
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p2.Model
{
    /// <summary>
    /// OBWritePaymentDetailsResponse1Data
    /// </summary>
    [DataContract]
    public partial class OBWritePaymentDetailsResponse1Data :  IEquatable<OBWritePaymentDetailsResponse1Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWritePaymentDetailsResponse1Data" /> class.
        /// </summary>
        /// <param name="paymentStatus">paymentStatus.</param>
        public OBWritePaymentDetailsResponse1Data(List<OBWritePaymentDetailsResponse1DataPaymentStatus> paymentStatus = default(List<OBWritePaymentDetailsResponse1DataPaymentStatus>))
        {
            this.PaymentStatus = paymentStatus;
        }
        
        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>
        [DataMember(Name="PaymentStatus", EmitDefaultValue=false)]
        public List<OBWritePaymentDetailsResponse1DataPaymentStatus> PaymentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWritePaymentDetailsResponse1Data {\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWritePaymentDetailsResponse1Data);
        }

        /// <summary>
        /// Returns true if OBWritePaymentDetailsResponse1Data instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWritePaymentDetailsResponse1Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWritePaymentDetailsResponse1Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    this.PaymentStatus != null &&
                    input.PaymentStatus != null &&
                    this.PaymentStatus.SequenceEqual(input.PaymentStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

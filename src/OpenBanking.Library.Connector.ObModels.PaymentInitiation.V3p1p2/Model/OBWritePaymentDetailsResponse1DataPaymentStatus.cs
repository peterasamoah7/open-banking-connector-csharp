/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.2
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p2.Model
{
    /// <summary>
    /// Payment status details.
    /// </summary>
    [DataContract]
    public partial class OBWritePaymentDetailsResponse1DataPaymentStatus :  IEquatable<OBWritePaymentDetailsResponse1DataPaymentStatus>, IValidatableObject
    {
        /// <summary>
        /// Status of a transfe, as assigned by the transaction administrator.
        /// </summary>
        /// <value>Status of a transfe, as assigned by the transaction administrator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,

            /// <summary>
            /// Enum AcceptedCancellationRequest for value: AcceptedCancellationRequest
            /// </summary>
            [EnumMember(Value = "AcceptedCancellationRequest")]
            AcceptedCancellationRequest = 2,

            /// <summary>
            /// Enum AcceptedCreditSettlementCompleted for value: AcceptedCreditSettlementCompleted
            /// </summary>
            [EnumMember(Value = "AcceptedCreditSettlementCompleted")]
            AcceptedCreditSettlementCompleted = 3,

            /// <summary>
            /// Enum AcceptedCustomerProfile for value: AcceptedCustomerProfile
            /// </summary>
            [EnumMember(Value = "AcceptedCustomerProfile")]
            AcceptedCustomerProfile = 4,

            /// <summary>
            /// Enum AcceptedFundsChecked for value: AcceptedFundsChecked
            /// </summary>
            [EnumMember(Value = "AcceptedFundsChecked")]
            AcceptedFundsChecked = 5,

            /// <summary>
            /// Enum AcceptedSettlementCompleted for value: AcceptedSettlementCompleted
            /// </summary>
            [EnumMember(Value = "AcceptedSettlementCompleted")]
            AcceptedSettlementCompleted = 6,

            /// <summary>
            /// Enum AcceptedSettlementInProcess for value: AcceptedSettlementInProcess
            /// </summary>
            [EnumMember(Value = "AcceptedSettlementInProcess")]
            AcceptedSettlementInProcess = 7,

            /// <summary>
            /// Enum AcceptedTechnicalValidation for value: AcceptedTechnicalValidation
            /// </summary>
            [EnumMember(Value = "AcceptedTechnicalValidation")]
            AcceptedTechnicalValidation = 8,

            /// <summary>
            /// Enum AcceptedWithChange for value: AcceptedWithChange
            /// </summary>
            [EnumMember(Value = "AcceptedWithChange")]
            AcceptedWithChange = 9,

            /// <summary>
            /// Enum AcceptedWithoutPosting for value: AcceptedWithoutPosting
            /// </summary>
            [EnumMember(Value = "AcceptedWithoutPosting")]
            AcceptedWithoutPosting = 10,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 11,

            /// <summary>
            /// Enum NoCancellationProcess for value: NoCancellationProcess
            /// </summary>
            [EnumMember(Value = "NoCancellationProcess")]
            NoCancellationProcess = 12,

            /// <summary>
            /// Enum PartiallyAcceptedCancellationRequest for value: PartiallyAcceptedCancellationRequest
            /// </summary>
            [EnumMember(Value = "PartiallyAcceptedCancellationRequest")]
            PartiallyAcceptedCancellationRequest = 13,

            /// <summary>
            /// Enum PartiallyAcceptedTechnicalCorrect for value: PartiallyAcceptedTechnicalCorrect
            /// </summary>
            [EnumMember(Value = "PartiallyAcceptedTechnicalCorrect")]
            PartiallyAcceptedTechnicalCorrect = 14,

            /// <summary>
            /// Enum PaymentCancelled for value: PaymentCancelled
            /// </summary>
            [EnumMember(Value = "PaymentCancelled")]
            PaymentCancelled = 15,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 16,

            /// <summary>
            /// Enum PendingCancellationRequest for value: PendingCancellationRequest
            /// </summary>
            [EnumMember(Value = "PendingCancellationRequest")]
            PendingCancellationRequest = 17,

            /// <summary>
            /// Enum Received for value: Received
            /// </summary>
            [EnumMember(Value = "Received")]
            Received = 18,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 19,

            /// <summary>
            /// Enum RejectedCancellationRequest for value: RejectedCancellationRequest
            /// </summary>
            [EnumMember(Value = "RejectedCancellationRequest")]
            RejectedCancellationRequest = 20

        }

        /// <summary>
        /// Status of a transfe, as assigned by the transaction administrator.
        /// </summary>
        /// <value>Status of a transfe, as assigned by the transaction administrator.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWritePaymentDetailsResponse1DataPaymentStatus" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBWritePaymentDetailsResponse1DataPaymentStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWritePaymentDetailsResponse1DataPaymentStatus" /> class.
        /// </summary>
        /// <param name="paymentTransactionId">Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable. (required).</param>
        /// <param name="status">Status of a transfe, as assigned by the transaction administrator. (required).</param>
        /// <param name="statusUpdateDateTime">Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00 (required).</param>
        /// <param name="statusDetail">statusDetail.</param>
        public OBWritePaymentDetailsResponse1DataPaymentStatus(string paymentTransactionId = default(string), StatusEnum status = default(StatusEnum), DateTimeOffset statusUpdateDateTime = default(DateTimeOffset), OBWritePaymentDetailsResponse1DataStatusDetail statusDetail = default(OBWritePaymentDetailsResponse1DataStatusDetail))
        {
            // to ensure "paymentTransactionId" is required (not null)
            this.PaymentTransactionId = paymentTransactionId ?? throw new ArgumentNullException("paymentTransactionId is a required property for OBWritePaymentDetailsResponse1DataPaymentStatus and cannot be null");
            this.Status = status;
            this.StatusUpdateDateTime = statusUpdateDateTime;
            this.StatusDetail = statusDetail;
        }
        
        /// <summary>
        /// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
        /// </summary>
        /// <value>Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.</value>
        [DataMember(Name="PaymentTransactionId", EmitDefaultValue=false)]
        public string PaymentTransactionId { get; set; }

        /// <summary>
        /// Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
        /// </summary>
        /// <value>Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00</value>
        [DataMember(Name="StatusUpdateDateTime", EmitDefaultValue=false)]
        public DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets StatusDetail
        /// </summary>
        [DataMember(Name="StatusDetail", EmitDefaultValue=false)]
        public OBWritePaymentDetailsResponse1DataStatusDetail StatusDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWritePaymentDetailsResponse1DataPaymentStatus {\n");
            sb.Append("  PaymentTransactionId: ").Append(PaymentTransactionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusUpdateDateTime: ").Append(StatusUpdateDateTime).Append("\n");
            sb.Append("  StatusDetail: ").Append(StatusDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWritePaymentDetailsResponse1DataPaymentStatus);
        }

        /// <summary>
        /// Returns true if OBWritePaymentDetailsResponse1DataPaymentStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWritePaymentDetailsResponse1DataPaymentStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWritePaymentDetailsResponse1DataPaymentStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentTransactionId == input.PaymentTransactionId ||
                    (this.PaymentTransactionId != null &&
                    this.PaymentTransactionId.Equals(input.PaymentTransactionId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusUpdateDateTime == input.StatusUpdateDateTime ||
                    (this.StatusUpdateDateTime != null &&
                    this.StatusUpdateDateTime.Equals(input.StatusUpdateDateTime))
                ) && 
                (
                    this.StatusDetail == input.StatusDetail ||
                    (this.StatusDetail != null &&
                    this.StatusDetail.Equals(input.StatusDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentTransactionId != null)
                    hashCode = hashCode * 59 + this.PaymentTransactionId.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusUpdateDateTime != null)
                    hashCode = hashCode * 59 + this.StatusUpdateDateTime.GetHashCode();
                if (this.StatusDetail != null)
                    hashCode = hashCode * 59 + this.StatusDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PaymentTransactionId (string) maxLength
            if(this.PaymentTransactionId != null && this.PaymentTransactionId.Length > 210)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentTransactionId, length must be less than 210.", new [] { "PaymentTransactionId" });
            }

            // PaymentTransactionId (string) minLength
            if(this.PaymentTransactionId != null && this.PaymentTransactionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentTransactionId, length must be greater than 1.", new [] { "PaymentTransactionId" });
            }

            yield break;
        }
    }

}

/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.4
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p4.Model
{
    /// <summary>
    /// OBWriteInternationalResponse4DataRefund
    /// </summary>
    [DataContract]
    public partial class OBWriteInternationalResponse4DataRefund :  IEquatable<OBWriteInternationalResponse4DataRefund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteInternationalResponse4DataRefund" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBWriteInternationalResponse4DataRefund() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteInternationalResponse4DataRefund" /> class.
        /// </summary>
        /// <param name="creditor">creditor.</param>
        /// <param name="agent">agent.</param>
        /// <param name="account">account (required).</param>
        public OBWriteInternationalResponse4DataRefund(OBWriteInternationalResponse4DataRefundCreditor creditor = default(OBWriteInternationalResponse4DataRefundCreditor), OBWriteInternationalResponse4DataRefundAgent agent = default(OBWriteInternationalResponse4DataRefundAgent), OBWriteDomesticResponse4DataRefundAccount account = default(OBWriteDomesticResponse4DataRefundAccount))
        {
            // to ensure "account" is required (not null)
            this.Account = account ?? throw new ArgumentNullException("account is a required property for OBWriteInternationalResponse4DataRefund and cannot be null");
            this.Creditor = creditor;
            this.Agent = agent;
        }
        
        /// <summary>
        /// Gets or Sets Creditor
        /// </summary>
        [DataMember(Name="Creditor", EmitDefaultValue=false)]
        public OBWriteInternationalResponse4DataRefundCreditor Creditor { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="Agent", EmitDefaultValue=false)]
        public OBWriteInternationalResponse4DataRefundAgent Agent { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="Account", EmitDefaultValue=false)]
        public OBWriteDomesticResponse4DataRefundAccount Account { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWriteInternationalResponse4DataRefund {\n");
            sb.Append("  Creditor: ").Append(Creditor).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWriteInternationalResponse4DataRefund);
        }

        /// <summary>
        /// Returns true if OBWriteInternationalResponse4DataRefund instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWriteInternationalResponse4DataRefund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWriteInternationalResponse4DataRefund input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Creditor == input.Creditor ||
                    (this.Creditor != null &&
                    this.Creditor.Equals(input.Creditor))
                ) && 
                (
                    this.Agent == input.Agent ||
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Creditor != null)
                    hashCode = hashCode * 59 + this.Creditor.GetHashCode();
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

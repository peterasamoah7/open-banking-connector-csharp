/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.4
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p4.Model
{
    /// <summary>
    /// Supporting Data provided by TPP, when requesting SCA Exemption.
    /// </summary>
    [DataContract]
    public partial class OBWriteDomesticConsent4DataSCASupportData :  IEquatable<OBWriteDomesticConsent4DataSCASupportData>, IValidatableObject
    {
        /// <summary>
        /// This field allows a PISP to request specific SCA Exemption for a Payment Initiation
        /// </summary>
        /// <value>This field allows a PISP to request specific SCA Exemption for a Payment Initiation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequestedSCAExemptionTypeEnum
        {
            /// <summary>
            /// Enum BillPayment for value: BillPayment
            /// </summary>
            [EnumMember(Value = "BillPayment")]
            BillPayment = 1,

            /// <summary>
            /// Enum ContactlessTravel for value: ContactlessTravel
            /// </summary>
            [EnumMember(Value = "ContactlessTravel")]
            ContactlessTravel = 2,

            /// <summary>
            /// Enum EcommerceGoods for value: EcommerceGoods
            /// </summary>
            [EnumMember(Value = "EcommerceGoods")]
            EcommerceGoods = 3,

            /// <summary>
            /// Enum EcommerceServices for value: EcommerceServices
            /// </summary>
            [EnumMember(Value = "EcommerceServices")]
            EcommerceServices = 4,

            /// <summary>
            /// Enum Kiosk for value: Kiosk
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            Kiosk = 5,

            /// <summary>
            /// Enum Parking for value: Parking
            /// </summary>
            [EnumMember(Value = "Parking")]
            Parking = 6,

            /// <summary>
            /// Enum PartyToParty for value: PartyToParty
            /// </summary>
            [EnumMember(Value = "PartyToParty")]
            PartyToParty = 7

        }

        /// <summary>
        /// This field allows a PISP to request specific SCA Exemption for a Payment Initiation
        /// </summary>
        /// <value>This field allows a PISP to request specific SCA Exemption for a Payment Initiation</value>
        [DataMember(Name="RequestedSCAExemptionType", EmitDefaultValue=false)]
        public RequestedSCAExemptionTypeEnum? RequestedSCAExemptionType { get; set; }
        /// <summary>
        /// Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
        /// </summary>
        /// <value>Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppliedAuthenticationApproachEnum
        {
            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            [EnumMember(Value = "CA")]
            CA = 1,

            /// <summary>
            /// Enum SCA for value: SCA
            /// </summary>
            [EnumMember(Value = "SCA")]
            SCA = 2

        }

        /// <summary>
        /// Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
        /// </summary>
        /// <value>Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP</value>
        [DataMember(Name="AppliedAuthenticationApproach", EmitDefaultValue=false)]
        public AppliedAuthenticationApproachEnum? AppliedAuthenticationApproach { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteDomesticConsent4DataSCASupportData" /> class.
        /// </summary>
        /// <param name="requestedSCAExemptionType">This field allows a PISP to request specific SCA Exemption for a Payment Initiation.</param>
        /// <param name="appliedAuthenticationApproach">Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP.</param>
        /// <param name="referencePaymentOrderId">Specifies a character string with a maximum length of 140 characters. Usage: If the payment is recurring then the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence..</param>
        public OBWriteDomesticConsent4DataSCASupportData(RequestedSCAExemptionTypeEnum? requestedSCAExemptionType = default(RequestedSCAExemptionTypeEnum?), AppliedAuthenticationApproachEnum? appliedAuthenticationApproach = default(AppliedAuthenticationApproachEnum?), string referencePaymentOrderId = default(string))
        {
            this.RequestedSCAExemptionType = requestedSCAExemptionType;
            this.AppliedAuthenticationApproach = appliedAuthenticationApproach;
            this.ReferencePaymentOrderId = referencePaymentOrderId;
        }
        
        /// <summary>
        /// Specifies a character string with a maximum length of 140 characters. Usage: If the payment is recurring then the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence.
        /// </summary>
        /// <value>Specifies a character string with a maximum length of 140 characters. Usage: If the payment is recurring then the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence.</value>
        [DataMember(Name="ReferencePaymentOrderId", EmitDefaultValue=false)]
        public string ReferencePaymentOrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWriteDomesticConsent4DataSCASupportData {\n");
            sb.Append("  RequestedSCAExemptionType: ").Append(RequestedSCAExemptionType).Append("\n");
            sb.Append("  AppliedAuthenticationApproach: ").Append(AppliedAuthenticationApproach).Append("\n");
            sb.Append("  ReferencePaymentOrderId: ").Append(ReferencePaymentOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWriteDomesticConsent4DataSCASupportData);
        }

        /// <summary>
        /// Returns true if OBWriteDomesticConsent4DataSCASupportData instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWriteDomesticConsent4DataSCASupportData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWriteDomesticConsent4DataSCASupportData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestedSCAExemptionType == input.RequestedSCAExemptionType ||
                    this.RequestedSCAExemptionType.Equals(input.RequestedSCAExemptionType)
                ) && 
                (
                    this.AppliedAuthenticationApproach == input.AppliedAuthenticationApproach ||
                    this.AppliedAuthenticationApproach.Equals(input.AppliedAuthenticationApproach)
                ) && 
                (
                    this.ReferencePaymentOrderId == input.ReferencePaymentOrderId ||
                    (this.ReferencePaymentOrderId != null &&
                    this.ReferencePaymentOrderId.Equals(input.ReferencePaymentOrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.RequestedSCAExemptionType.GetHashCode();
                hashCode = hashCode * 59 + this.AppliedAuthenticationApproach.GetHashCode();
                if (this.ReferencePaymentOrderId != null)
                    hashCode = hashCode * 59 + this.ReferencePaymentOrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReferencePaymentOrderId (string) maxLength
            if(this.ReferencePaymentOrderId != null && this.ReferencePaymentOrderId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferencePaymentOrderId, length must be less than 128.", new [] { "ReferencePaymentOrderId" });
            }

            // ReferencePaymentOrderId (string) minLength
            if(this.ReferencePaymentOrderId != null && this.ReferencePaymentOrderId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferencePaymentOrderId, length must be greater than 1.", new [] { "ReferencePaymentOrderId" });
            }

            yield break;
        }
    }

}

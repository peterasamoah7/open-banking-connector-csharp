/* 
 * Payment Initiation API
 *
 * OpenAPI for Payment Initiation API Specification
 *
 * The version of the OpenAPI document: v3.1.4
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p4.Model
{
    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [DataContract]
    public partial class OBWriteDomesticConsentResponse4DataCharges :  IEquatable<OBWriteDomesticConsentResponse4DataCharges>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ChargeBearer
        /// </summary>
        [DataMember(Name="ChargeBearer", EmitDefaultValue=false)]
        public OBChargeBearerType1Code ChargeBearer { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteDomesticConsentResponse4DataCharges" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBWriteDomesticConsentResponse4DataCharges() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteDomesticConsentResponse4DataCharges" /> class.
        /// </summary>
        /// <param name="chargeBearer">chargeBearer (required).</param>
        /// <param name="type">Charge type, in a coded form. (required).</param>
        /// <param name="amount">amount (required).</param>
        public OBWriteDomesticConsentResponse4DataCharges(OBChargeBearerType1Code chargeBearer = default(OBChargeBearerType1Code), string type = default(string), OBActiveOrHistoricCurrencyAndAmount amount = default(OBActiveOrHistoricCurrencyAndAmount))
        {
            this.ChargeBearer = chargeBearer;
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for OBWriteDomesticConsentResponse4DataCharges and cannot be null");
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for OBWriteDomesticConsentResponse4DataCharges and cannot be null");
        }
        
        /// <summary>
        /// Charge type, in a coded form.
        /// </summary>
        /// <value>Charge type, in a coded form.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWriteDomesticConsentResponse4DataCharges {\n");
            sb.Append("  ChargeBearer: ").Append(ChargeBearer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWriteDomesticConsentResponse4DataCharges);
        }

        /// <summary>
        /// Returns true if OBWriteDomesticConsentResponse4DataCharges instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWriteDomesticConsentResponse4DataCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWriteDomesticConsentResponse4DataCharges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChargeBearer == input.ChargeBearer ||
                    this.ChargeBearer.Equals(input.ChargeBearer)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ChargeBearer.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
